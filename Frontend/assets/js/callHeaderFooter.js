// Global click handler to close panels when clicking outside
document.addEventListener('click', function (e) {
  const userPanel = document.getElementById('userPanel');
  const userBtn = document.getElementById('userBtn');
  const userInfo = document.getElementById('userInfo');
  const userInfoBtn = document.getElementById('userInfoBtn');

  // Check if clicking outside user panel and not on user buttons
  if (
    userPanel &&
    !userPanel.classList.contains('hidden') &&
    !userPanel.contains(e.target) &&
    (!userBtn || !userBtn.contains(e.target)) &&
    (!userInfo || !userInfo.contains(e.target)) &&
    (!userInfoBtn || !userInfoBtn.contains(e.target))
  ) {
    console.log('üñ±Ô∏è [callHeaderFooter] Clicked outside user panel, closing...');
    closeUserPanel();
  }
});

function openUserPanel() {
  const userPanel = document.getElementById('userPanel');
  if (userPanel) {
    userPanel.classList.remove('hidden');
    setTimeout(() => {
      userPanel.classList.remove('translate-x-full');
    }, 10);
  }
}

function closeUserPanel() {
  const userPanel = document.getElementById('userPanel');
  if (userPanel) {
    userPanel.classList.add('translate-x-full');
    setTimeout(() => {
      userPanel.classList.add('hidden');
    }, 300);
  }
}

function initHeaderPanel() {
  const userBtn = document.getElementById('userBtn');
  const userPanel = document.getElementById('userPanel');
  const closeUserPanelBtn = document.getElementById('closeUserPanel');

  if (!userBtn || !userPanel || !closeUserPanelBtn) return;

  userBtn.onclick = function (e) {
    e.stopPropagation(); // Prevent event bubbling
    console.log('üñ±Ô∏è [callHeaderFooter] User button clicked');
    openUserPanel();
  };

  closeUserPanelBtn.onclick = function (e) {
    e.stopPropagation();
    console.log('üñ±Ô∏è [callHeaderFooter] Close button clicked');
    closeUserPanel();
  };

  // Initialize auth state after header is loaded
  setTimeout(() => {
    updateHeaderAuthState();
  }, 100);
}

// Auth state management for header
function updateHeaderAuthState() {
  console.log('üîÑ [callHeaderFooter] Updating header auth state...');

  const userBtn = document.getElementById('userBtn');
  const userInfo = document.getElementById('userInfo');
  const guestActions = document.getElementById('guestActions');
  const userActions = document.getElementById('userActions');
  const userName = document.getElementById('userName');
  const headerUserName = document.getElementById('headerUserName');
  const userInfoBtn = document.getElementById('userInfoBtn');

  if (typeof window.AuthManager !== 'undefined' && window.AuthManager.isAuthenticated()) {
    const user = window.AuthManager.getUser();
    console.log('üë§ [callHeaderFooter] User authenticated:', user);

    if (user) {
      // Hide guest button, show user info in header
      if (userBtn) userBtn.classList.add('hidden');
      if (userInfo) userInfo.classList.remove('hidden');

      // Update user names
      const displayName = user.name || user.username || 'User';
      if (userName) userName.textContent = displayName;
      if (headerUserName) headerUserName.textContent = displayName;

      // Update panel actions
      if (guestActions) guestActions.classList.add('hidden');
      if (userActions) userActions.classList.remove('hidden');

      // Add click handler for user info
      if (userInfo && !userInfo._clickHandlerAdded) {
        userInfo.addEventListener('click', function (e) {
          e.stopPropagation(); // Prevent event bubbling
          console.log('üñ±Ô∏è [callHeaderFooter] User info clicked');
          openUserPanel();
        });
        userInfo._clickHandlerAdded = true;
      }
      if (userInfoBtn && !userInfoBtn._clickHandlerAdded) {
        userInfoBtn.addEventListener('click', function (e) {
          e.stopPropagation(); // Prevent event bubbling  
          console.log('üñ±Ô∏è [callHeaderFooter] User info button clicked');
          openUserPanel();
        });
        userInfoBtn._clickHandlerAdded = true;
      }

      console.log('‚úÖ [callHeaderFooter] Header updated for authenticated user:', displayName);
    }
  } else {
    console.log('üö´ [callHeaderFooter] User not authenticated, showing guest state');

    // Show guest button, hide user info
    if (userBtn) userBtn.classList.remove('hidden');
    if (userInfo) userInfo.classList.add('hidden');

    // Show guest actions in panel
    if (guestActions) guestActions.classList.remove('hidden');
    if (userActions) userActions.classList.add('hidden');
  }
}

// Handle logout button
function handleLogout() {
  console.log('üö™ [callHeaderFooter] Logout button clicked');

  if (typeof window.AuthManager !== 'undefined') {
    // Close user panel first
    closeUserPanel();

    window.AuthManager.logout();

    // Show success message
    const messageDiv = document.createElement('div');
    messageDiv.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-[10000] flex items-center space-x-2';
    messageDiv.innerHTML = `
        <i class="ri-check-circle-line text-xl"></i>
        <span>ƒêƒÉng xu·∫•t th√†nh c√¥ng!</span>
      `;
    document.body.appendChild(messageDiv);

    // Remove message after 3 seconds
    setTimeout(() => {
      if (messageDiv.parentNode) {
        messageDiv.remove();
      }
    }, 3000);

    // Update header state
    updateHeaderAuthState();

    // Redirect to home page
    setTimeout(() => {
      window.location.href = '/';
    }, 1500);
  }
}

// Make functions globally available
window.updateHeaderAuthState = updateHeaderAuthState;

function openCartPanel() {
  const cartPanel = document.getElementById('cartPanel');
  if (cartPanel) {
    cartPanel.classList.remove('hidden');
    setTimeout(() => {
      cartPanel.classList.remove('translate-x-full');
    }, 10);
  }
}

function closeCartPanel() {
  const cartPanel = document.getElementById('cartPanel');
  if (cartPanel) {
    cartPanel.classList.add('translate-x-full');
    setTimeout(() => {
      cartPanel.classList.add('hidden');
    }, 300);
  }
}

// Cart logic
let cart = [
  {
    id: 1,
    name: "Tu·ªïi tr·∫ª ƒë√°ng gi√° bao nhi√™u",
    author: "Rosie Nguy·ªÖn",
    price: 120000,
    oldPrice: 150000,
    image: "https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1495635816i/32521178.jpg",
    quantity: 1
  }
  // Th√™m s·∫£n ph·∫©m m·∫´u kh√°c n·∫øu mu·ªën
];

// ƒê·ªãnh d·∫°ng ti·ªÅn Vi·ªát
function formatVND(n) {
  return n.toLocaleString('vi-VN') + "ƒë";
}

// Render cart items
function renderCart() {
  const cartItems = document.getElementById('cartItems');
  const cartBadge = document.querySelector('.cart-badge');
  if (!cartItems) return;

  cartItems.innerHTML = '';
  let total = 0;

  if (cart.length === 0) {
    cartItems.innerHTML = `<div class="text-gray-500 text-center" id="cartEmptyMsg">Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong gi·ªè h√†ng.</div>`;
    if (cartBadge) cartBadge.removeAttribute('data-count');
    document.getElementById('cartTotal').textContent = formatVND(0);
    return;
  }

  cart.forEach((item, idx) => {
    total += item.price * item.quantity;
    const itemDiv = document.createElement('div');
    itemDiv.className = "flex items-center gap-3";
    itemDiv.innerHTML = `
      <img src="${item.image}" alt="S√°ch" class="w-14 h-20 object-cover rounded border" />
      <div class="flex-1">
        <div class="font-medium text-gray-800">${item.name}</div>
        <div class="text-sm text-gray-500">${item.author}</div>
        <div class="flex items-center gap-2 mt-1">
          <span class="text-primarynavy font-semibold">${formatVND(item.price)}</span>
          ${item.oldPrice ? `<span class="text-xs text-gray-400 line-through">${formatVND(item.oldPrice)}</span>` : ''}
        </div>
        <div class="flex items-center gap-2 mt-2">
          <button class="px-2 py-1 border rounded" data-action="decrease" data-idx="${idx}">-</button>
          <input type="number" min="1" value="${item.quantity}" class="w-12 text-center border rounded focus:outline-none focus:ring-2 focus:ring-primarynavy no-spinner" data-idx="${idx}" />
          <button class="px-2 py-1 border rounded" data-action="increase" data-idx="${idx}">+</button>
          <button class="ml-2 text-red-500 hover:underline text-l" data-action="remove" data-idx="${idx}">X√≥a</button>
        </div>
      </div>
    `;
    cartItems.appendChild(itemDiv);
  });

  document.getElementById('cartTotal').textContent = formatVND(total);
  if (cartBadge) cartBadge.setAttribute('data-count', cart.reduce((s, i) => s + i.quantity, 0));
}

// X·ª≠ l√Ω s·ª± ki·ªán tƒÉng/gi·∫£m/x√≥a/nh·∫≠p s·ªë l∆∞·ª£ng
function cartEventHandler(e) {
  const target = e.target;
  if (target.matches('[data-action="decrease"]')) {
    const idx = +target.getAttribute('data-idx');
    if (cart[idx].quantity > 1) cart[idx].quantity--;
    renderCart();
  }
  if (target.matches('[data-action="increase"]')) {
    const idx = +target.getAttribute('data-idx');
    cart[idx].quantity++;
    renderCart();
  }
  if (target.matches('[data-action="remove"]')) {
    const idx = +target.getAttribute('data-idx');
    cart.splice(idx, 1);
    renderCart();
  }
  if (target.matches('input[type="number"][data-idx]')) {
    const idx = +target.getAttribute('data-idx');
    let val = parseInt(target.value, 10);
    if (isNaN(val) || val < 1) val = 1;
    cart[idx].quantity = val;
    renderCart();
  }
}

function initCartPanel() {
  const cartBtn = document.getElementById('cartBtn');
  const cartPanel = document.getElementById('cartPanel');
  const closeCartPanelBtn = document.getElementById('closeCartPanel');
  const cartItems = document.getElementById('cartItems');

  if (!cartBtn || !cartPanel || !closeCartPanelBtn || !cartItems) return;

  cartBtn.onclick = openCartPanel;
  closeCartPanelBtn.onclick = closeCartPanel;

  // ƒê√≥ng panel khi click ra ngo√†i panel
  document.addEventListener('mousedown', function (e) {
    if (
      cartPanel &&
      !cartPanel.classList.contains('hidden') &&
      !cartPanel.classList.contains('translate-x-full') &&
      !cartPanel.contains(e.target) &&
      (!cartBtn || !cartBtn.contains(e.target))
    ) {
      closeCartPanel();
    }
  });

  // S·ª± ki·ªán cho c√°c n√∫t trong cart
  cartItems.addEventListener('click', cartEventHandler);
  cartItems.addEventListener('change', cartEventHandler);

  renderCart();
}

// Search overlay logic
function showSearchOverlay() {
  // T·∫°o overlay n·∫øu ch∆∞a c√≥
  let searchOverlay = document.getElementById('searchOverlay');
  if (!searchOverlay) {
    searchOverlay = document.createElement('div');
    searchOverlay.id = 'searchOverlay';
    searchOverlay.className = 'fixed inset-0 z-[10000] bg-white bg-opacity-95 flex flex-col items-center justify-start pt-16';
    searchOverlay.innerHTML = `
      <div class="w-full max-w-2xl mx-auto px-4">
        <form id="searchForm" class="flex items-center gap-2">
          <input id="searchInputOverlay" type="text" placeholder="T√¨m ki·∫øm s√°ch, t√°c gi·∫£, ISBN..." class="flex-1 border-b-2 border-gray-300 focus:border-primarynavy outline-none text-lg py-2 bg-transparent" autofocus />
          <button type="submit" class="ml-2 px-4 py-2 bg-primarynavy text-white rounded">T√¨m ki·∫øm</button>
          <button type="button" id="closeSearchOverlay" class="ml-2 text-2xl text-gray-500 hover:text-primarynavy" aria-label="ƒê√≥ng">&times;</button>
        </form>
      </div>
    `;
    document.body.appendChild(searchOverlay);
  } else {
    searchOverlay.style.display = 'flex';
    setTimeout(() => {
      document.getElementById('searchInputOverlay').focus();
    }, 50);
  }
  document.body.style.overflow = 'hidden'; // NgƒÉn scroll n·ªÅn
}

function hideSearchOverlay() {
  const searchOverlay = document.getElementById('searchOverlay');
  if (searchOverlay) {
    searchOverlay.style.display = 'none';
  }
  document.body.style.overflow = '';
}

// Kh·ªüi t·∫°o s·ª± ki·ªán cho n√∫t search tr√™n header
function initSearchOverlay() {
  // ƒê·∫£m b·∫£o ch·ªâ g·∫Øn 1 l·∫ßn
  const header = document.getElementById('header-placeholder') || document;
  const searchBtn = header.querySelector('.search-btn');
  if (!searchBtn) return;

  searchBtn.onclick = function (e) {
    e.preventDefault();
    showSearchOverlay();
  };

  // ƒê√≥ng overlay khi click n√∫t ƒë√≥ng ho·∫∑c submit form
  document.addEventListener('click', function (e) {
    if (e.target && e.target.id === 'closeSearchOverlay') {
      hideSearchOverlay();
    }
  });

  // ƒê√≥ng overlay khi nh·∫•n ESC
  document.addEventListener('keydown', function (e) {
    if (e.key === 'Escape') hideSearchOverlay();
  });

  // X·ª≠ l√Ω submit form t√¨m ki·∫øm
  document.addEventListener('submit', async function (e) {
    if (e.target && e.target.id === 'searchForm') {
      e.preventDefault();
      const query = document.getElementById('searchInputOverlay').value.trim();
      if (query) {
        window.location.href = `/searchBooks?query=${encodeURIComponent(query)}`;
      } else {
        window.location.href = `/searchBooks`;
      }
      hideSearchOverlay();
    }
  });
}

// Hi·ªÉn th·ªã √¥ t√¨m ki·∫øm thay th·∫ø ph·∫ßn center c·ªßa header, gi·ªØ logo v√† c√°c n√∫t hai b√™n, gi·ªØ chi·ªÅu cao header, tr∆∞·ª£t ngang m∆∞·ª£t m√†, click ra ngo√†i s·∫Ω tr·ªü l·∫°i b√¨nh th∆∞·ªùng
function showHeaderSearchBar() {
  const header = document.getElementById('header');
  if (!header) return;
  const headerContent = header.querySelector('.header-content');
  if (!headerContent) return;

  // L∆∞u l·∫°i ph·∫ßn center c≈© ƒë·ªÉ c√≥ th·ªÉ kh√¥i ph·ª•c, ch·ªâ n·∫øu ch∆∞a c√≥
  if (typeof headerContent._originalInnerHTML === 'undefined') {
    headerContent._originalInnerHTML = headerContent.innerHTML;
    headerContent._originalHeight = headerContent.offsetHeight;
  }

  // L·∫•y c√°c ph·∫ßn t·ª≠ hai b√™n
  const logo = headerContent.querySelector('.logo');
  const headerActions = headerContent.querySelector('.header-actions');

  // T·∫°o ph·∫ßn center l√† form search nh·ªè g·ªçn, hi·ªáu ·ª©ng scale+slide ƒë·∫πp m·∫Øt
  headerContent.innerHTML = `
    ${logo ? logo.outerHTML : ''}
    <div id="headerSearchTransition" class="flex-1 flex justify-center items-center transition-all duration-300 ease-in-out transform translate-x-10 scale-90 opacity-0" style="height:${headerContent._originalHeight}px;">
      <form id="headerSearchForm" class="w-full max-w-md flex items-center gap-2 bg-white rounded-lg shadow px-2 py-1 border border-gray-200" autocomplete="off" style="height:42px;">
        <input id="headerSearchInput" type="text" placeholder="T√¨m ki·∫øm s√°ch, t√°c gi·∫£, ISBN..." class="flex-1 border-0 focus:ring-0 outline-none text-base px-2 bg-transparent" autofocus style="height:38px;" />
        <button type="submit" class="px-3 py-1 bg-primarynavy text-white rounded">T√¨m</button>
        <button id="closeHeaderSearchBar"></button>
      </form>
    </div>
    ${headerActions ? headerActions.outerHTML : ''}
  `;

  // ƒê·∫£m b·∫£o chi·ªÅu cao header-content kh√¥ng ƒë·ªïi khi search
  headerContent.style.minHeight = headerContent._originalHeight + "px";
  headerContent.style.height = headerContent._originalHeight + "px";

  // K√≠ch ho·∫°t hi·ªáu ·ª©ng tr∆∞·ª£t ngang + scale + opacity
  setTimeout(() => {
    const searchTransition = document.getElementById('headerSearchTransition');
    if (searchTransition) {
      searchTransition.classList.remove('translate-x-10');
      searchTransition.classList.remove('scale-90');
      searchTransition.classList.remove('opacity-0');
      searchTransition.classList.add('translate-x-0');
      searchTransition.classList.add('scale-100');
      searchTransition.classList.add('opacity-100');
    }
    const input = document.getElementById('headerSearchInput');
    if (input) input.focus();
  }, 10);

  // ƒê√≥ng search bar khi b·∫•m n√∫t ƒë√≥ng
  document.getElementById('closeHeaderSearchBar').onclick = function () {
    closeHeaderSearchBarWithTransition();
  };

  // ƒê√≥ng search bar khi submit
  document.getElementById('headerSearchForm').onsubmit = function (e) {
    e.preventDefault();
    const query = document.getElementById('headerSearchInput').value.trim();
    if (query) {
      window.location.href = `/searchBooks?query=${encodeURIComponent(query)}`;
    }
  };

  // ƒê√≥ng search bar khi click ra ngo√†i form search
  setTimeout(() => {
    function outsideClickHandler(e) {
      const form = document.getElementById('headerSearchForm');
      if (form && !form.contains(e.target)) {
        closeHeaderSearchBarWithTransition();
        document.removeEventListener('mousedown', outsideClickHandler);
      }
    }
    document.addEventListener('mousedown', outsideClickHandler);
  }, 20);

  // ƒê√≥ng search bar khi nh·∫•n ESC
  document.addEventListener('keydown', function escHandler(e) {
    if (e.key === 'Escape') {
      closeHeaderSearchBarWithTransition();
      document.removeEventListener('keydown', escHandler);
    }
  });
}

// Th√™m hi·ªáu ·ª©ng transition khi ƒë√≥ng search bar
function closeHeaderSearchBarWithTransition() {
  const searchTransition = document.getElementById('headerSearchTransition');
  if (searchTransition) {
    searchTransition.classList.remove('translate-x-0', 'scale-100', 'opacity-100');
    searchTransition.classList.add('translate-x-10', 'scale-90', 'opacity-0');
    setTimeout(() => {
      restoreHeaderCenter();
    }, 300);
  } else {
    restoreHeaderCenter();
  }
}

function restoreHeaderCenter() {
  const header = document.getElementById('header');
  if (!header) return;
  const headerContent = header.querySelector('.header-content');
  // Ch·ªâ kh√¥i ph·ª•c n·∫øu ƒë√£ t·ª´ng l∆∞u _originalInnerHTML
  if (headerContent && typeof headerContent._originalInnerHTML !== 'undefined') {
    headerContent.innerHTML = headerContent._originalInnerHTML;
    delete headerContent._originalInnerHTML;
    // Reset l·∫°i chi·ªÅu cao v·ªÅ m·∫∑c ƒë·ªãnh
    headerContent.style.minHeight = "";
    headerContent.style.height = "";
    delete headerContent._originalHeight;
    if (typeof initHeaderPanel === 'function') initHeaderPanel();
    if (typeof initCartPanel === 'function') initCartPanel();
    if (typeof initSearchBarButton === 'function') initSearchBarButton();
  }
}

// G·∫Øn s·ª± ki·ªán cho n√∫t search tr√™n header ƒë·ªÉ thay th·∫ø ph·∫ßn center
function initSearchBarButton() {
  const header = document.getElementById('header');
  if (!header) return;
  const headerContent = header.querySelector('.header-content');
  if (!headerContent) return;
  const searchBtn = headerContent.querySelector('.search-btn');
  if (!searchBtn) return;
  // ƒê·∫£m b·∫£o kh√¥ng g·∫Øn nhi·ªÅu l·∫ßn
  searchBtn.onclick = function (e) {
    e.preventDefault();
    showHeaderSearchBar();
  };
}

// ====== HEADER/FOOTER INIT LOGIC ENHANCED ======

// Debug helper for header state
window.debugHeaderState = function () {
  const user = window.AuthManager && window.AuthManager.getUser ? window.AuthManager.getUser() : null;
  const isAuth = window.AuthManager && window.AuthManager.isAuthenticated ? window.AuthManager.isAuthenticated() : false;
  const token = localStorage.getItem('authToken');
  const userData = localStorage.getItem('userData');
  console.log('[debugHeaderState] isAuthenticated:', isAuth, '\nuser:', user, '\nauthToken:', token, '\nuserData:', userData);
  return { isAuthenticated: isAuth, user, authToken: token, userData };
};

// Main header/footer loader
function loadHeaderFooter() {
  // Load header
  fetch('/components/header.html')
    .then(res => res.text())
    .then(data => {
      document.getElementById('header-placeholder').innerHTML = data;
      // G·ªçi updateHeaderAuthState ngay sau khi g·∫Øn header v√†o DOM
      if (typeof updateHeaderAuthState === 'function') updateHeaderAuthState();
      if (typeof initHeaderPanel === 'function') initHeaderPanel();
      if (typeof initCartPanel === 'function') initCartPanel();
      if (typeof initSearchBarButton === 'function') initSearchBarButton();
      // Add logout button handler and auth state management after header is loaded
      setTimeout(() => {
        // Remove any old event listeners to avoid stacking
        document.removeEventListener('click', window._headerLogoutDelegation, true);
        window.removeEventListener('authStateChanged', window._headerAuthStateChanged, true);
        window.removeEventListener('storage', window._headerStorageChanged, true);
        // Delegated logout button handler
        window._headerLogoutDelegation = function (e) {
          if (e.target.id === 'logoutBtn' || (e.target.closest && e.target.closest('#logoutBtn'))) {
            e.preventDefault();
            e.stopPropagation();
            console.log('üö™ [callHeaderFooter] Logout button clicked via delegation');
            handleLogout();
          }
        };
        document.addEventListener('click', window._headerLogoutDelegation, true);
        // Auth state changed event
        window._headerAuthStateChanged = function () {
          console.log('üîÑ [callHeaderFooter] Auth state changed event received');
          updateHeaderAuthState();
        };
        window.addEventListener('authStateChanged', window._headerAuthStateChanged, true);
        // Storage event for cross-tab sync
        window._headerStorageChanged = function (e) {
          if (e.key === 'authToken' || e.key === 'userData') {
            console.log('üîÑ [callHeaderFooter] Storage changed, updating header...', e.key);
            updateHeaderAuthState();
          }
        };
        window.addEventListener('storage', window._headerStorageChanged, true);
        // Update auth state after everything is loaded
        updateHeaderAuthState();
        // Also try again after a short delay to ensure all scripts are loaded
        setTimeout(updateHeaderAuthState, 500);
      }, 200);
    });
  // Load footer
  fetch('/components/footer.html')
    .then(res => res.text())
    .then(data => {
      document.getElementById('footer-placeholder').innerHTML = data;
    });
}

// Entry point: load header/footer immediately (no dependency wait)
loadHeaderFooter();

// (ƒê√£ b·ªè ho√†n to√†n c√°c ƒëo·∫°n fetch header/footer c≈© v√† logic waitForDependencies)
// ====== PATCH AuthManager FOR CROSS-TAB LOGIN/LOGOUT SYNC ======
(function patchAuthManagerForSync() {
  function fireStorageEvent(key, oldValue, newValue) {
    // T·∫°o s·ª± ki·ªán storage gi·∫£ l·∫≠p cho c√°c tab kh√°c
    if (typeof window === 'undefined') return;
    const event = document.createEvent('StorageEvent');
    event.initStorageEvent('storage', false, false, key, oldValue, newValue, window.location.href, localStorage);
    window.dispatchEvent(event);
  }
  function patchLogout() {
    if (!window.AuthManager || !window.AuthManager.logout || window.AuthManager._patchedForSync) return;
    const oldLogout = window.AuthManager.logout;
    window.AuthManager.logout = function () {
      const oldToken = localStorage.getItem('authToken');
      const oldUser = localStorage.getItem('userData');
      const result = oldLogout.apply(this, arguments);
      // ƒê·∫£m b·∫£o localStorage ƒë√£ x√≥a
      setTimeout(() => {
        fireStorageEvent('authToken', oldToken, null);
        fireStorageEvent('userData', oldUser, null);
      }, 10);
      // Ph√°t custom event cho c√°c script kh√°c n·∫øu c·∫ßn
      window.dispatchEvent(new Event('authStateChanged'));
      return result;
    };
    window.AuthManager._patchedForSync = true;
  }
  function patchLogin() {
    if (!window.AuthManager || !window.AuthManager.login || window.AuthManager._patchedLoginForSync) return;
    const oldLogin = window.AuthManager.login;
    window.AuthManager.login = function () {
      const oldToken = localStorage.getItem('authToken');
      const oldUser = localStorage.getItem('userData');
      const result = oldLogin.apply(this, arguments);
      setTimeout(() => {
        const newToken = localStorage.getItem('authToken');
        const newUser = localStorage.getItem('userData');
        fireStorageEvent('authToken', oldToken, newToken);
        fireStorageEvent('userData', oldUser, newUser);
      }, 10);
      window.dispatchEvent(new Event('authStateChanged'));
      return result;
    };
    window.AuthManager._patchedLoginForSync = true;
  }
  // Patch ngay n·∫øu AuthManager ƒë√£ c√≥, ho·∫∑c patch l·∫°i khi AuthManager xu·∫•t hi·ªán
  if (window.AuthManager) {
    patchLogout();
    patchLogin();
  } else {
    const interval = setInterval(() => {
      if (window.AuthManager) {
        patchLogout();
        patchLogin();
        clearInterval(interval);
      }
    }, 100);
  }
})();